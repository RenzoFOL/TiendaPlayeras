@model TiendaPlayeras.Web.Models.Product
@using TiendaPlayeras.Web.Models
@{
    ViewData["Title"] = Model.Name;
    
    // SISTEMA H√çBRIDO OPTIMIZADO
    var productImages = new List<string>();
    var images = Model.ProductImages as List<ProductImage> ?? Model.ProductImages?.ToList();
    
    // PRIMERO: Nuevo sistema (ProductImages)
    if (images != null && images.Any())
    {
        foreach (var img in images.OrderBy(x => x.DisplayOrder))
        {
            if (!string.IsNullOrWhiteSpace(img.Path))
            {
                productImages.Add(img.Path);
            }
        }
    }
    
    // SEGUNDO: Sistema antiguo (MainImagePath) - backup
    if (!productImages.Any() && !string.IsNullOrWhiteSpace(Model.MainImagePath))
    {
        productImages.Add(Model.MainImagePath);
    }
    
    // TERCERO: Placeholder como √∫ltimo recurso
    if (!productImages.Any())
    {
        productImages.Add("/images/placeholder.png");
    }
    
    bool showThumbnails = productImages.Count > 1;
    bool usingOldSystem = (images == null || !images.Any()) && !string.IsNullOrWhiteSpace(Model.MainImagePath);
    
    // DEBUG: Para ver qu√© sistema se est√° usando
    if (usingOldSystem)
    {
        <text><!-- üîÑ Usando sistema antiguo de im√°genes --></text>
    }
    else if (images != null && images.Any())
    {
        <text><!-- ‚úÖ Usando nuevo sistema de im√°genes --></text>
    }
}

<link rel="stylesheet" type="text/css/kaira" href="/css/kaira/catalog_producto.css">


<section class="single-product-section">
    <div class="container">
        <!-- Breadcrumb -->
        <div class="breadcrumb-custom">
            <a href="/">Inicio</a>
            <span>/</span>
            <a href="/Catalog">Cat√°logo</a>
            <span>/</span>
            <span>@Model.Name</span>
        </div>

        <div class="row">
            <!-- Galer√≠a de im√°genes -->
            <div class="col-lg-6">
                <div class="product-gallery">
                    <div class="main-image-container">
                        <img src="@productImages[0]" alt="@Model.Name" class="main-product-image" id="mainProductImage"
                             onerror="this.src='/images/placeholder.png'">
                    </div>

                     @if (showThumbnails)
                    {
                        <div class="thumbnail-gallery">
                            @for (int i = 0; i < productImages.Count; i++)
                            {
                                <div class="thumbnail-item @(i == 0 ? "active" : "")" 
                                     data-image="@productImages[i]">
                                    <img src="@productImages[i]" 
                                         alt="Imagen @(i + 1) de @Model.Name"
                                         onerror="this.src='/images/placeholder.png'">
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            <!-- Informaci√≥n del producto -->
            <div class="col-lg-6">
                <div class="product-info-section">
                    <h1 class="product-title-main">@Model.Name</h1>
                    
                    <div class="product-price-main">
                        @Model.BasePrice.ToString("C")
                    </div>

                    @if (!string.IsNullOrWhiteSpace(Model.Description))
                    {
                        <div class="product-description-text">
                            @Model.Description
                        </div>
                    }

                    <!-- Selector de tallas -->
                    <div class="size-selector-section">
                        <label class="section-label-kaira">Selecciona tu talla</label>
                        <div class="size-options">
                            <label class="size-option-kaira">
                                <input type="radio" name="size" value="S">
                                S
                            </label>
                            <label class="size-option-kaira">
                                <input type="radio" name="size" value="M" checked>
                                M
                            </label>
                            <label class="size-option-kaira">
                                <input type="radio" name="size" value="L">
                                L
                            </label>
                            <label class="size-option-kaira">
                                <input type="radio" name="size" value="XL">
                                XL
                            </label>
                        </div>
                    </div>

                    <!-- Cantidad -->
                    <div class="quantity-selector">
                        <label class="section-label-kaira">Cantidad</label>
                        <div class="quantity-wrapper">
                            <button type="button" class="qty-btn" id="decreaseQty">‚àí</button>
                            <input type="number" class="qty-input" id="quantity" value="1" min="1" max="99" readonly>
                            <button type="button" class="qty-btn" id="increaseQty">+</button>
                        </div>
                    </div>

                    <!-- Botones de acci√≥n -->
                    <div class="product-actions">
                        <button type="button" class="btn-kaira btn-kaira-primary" id="btnAddToCart">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.08-.14.12-.31.12-.48 0-.55-.45-1-1-1H5.21l-.94-2H1zm16 16c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2z"/>
                            </svg>
                            Agregar al carrito
                        </button>
                        <button type="button" class="btn-kaira btn-kaira-success" id="btnBuyNow">
                            Comprar ahora
                        </button>
                        <button type="button" class="btn-wishlist-kaira" id="btnWishlist">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
                            </svg>
                        </button>
                    </div>

                    <!-- Caracter√≠sticas del producto -->
                    <div class="product-features">
                        <div class="feature-item">
                            <div class="feature-icon">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M20 6h-2.18c.11-.31.18-.65.18-1a2.996 2.996 0 0 0-5.5-1.65l-.5.67-.5-.68C10.96 2.54 10.05 2 9 2 7.34 2 6 3.34 6 5c0 .35.07.69.18 1H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-5-2c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM9 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm11 15H4v-2h16v2zm0-5H4V8h5.08L7 10.83 8.62 12 11 8.76l1-1.36 1 1.36L15.38 12 17 10.83 14.92 8H20v6z"/>
                                </svg>
                            </div>
                            <div class="feature-content">
                                <h6>Env√≠o gratis</h6>
                                <p>En compras mayores a $500</p>
                            </div>
                        </div>
                        <div class="feature-item">
                            <div class="feature-icon">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M12 6v3l4-4-4-4v3c-4.42 0-8 3.58-8 8 0 1.57.46 3.03 1.24 4.26L6.7 14.8c-.45-.83-.7-1.79-.7-2.8 0-3.31 2.69-6 6-6zm6.76 1.74L17.3 9.2c.44.84.7 1.79.7 2.8 0 3.31-2.69 6-6 6v-3l-4 4 4 4v-3c4.42 0 8-3.58 8-8 0-1.57-.46-3.03-1.24-4.26z"/>
                                </svg>
                            </div>
                            <div class="feature-content">
                                <h6>Devoluciones gratuitas</h6>
                                <p>Dentro de 30 d√≠as</p>
                            </div>
                        </div>
                        <div class="feature-item">
                            <div class="feature-icon">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M19 6h-2c0-2.76-2.24-5-5-5S7 3.24 7 6H5c-1.1 0-1.99.9-1.99 2L3 20c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm-7-3c1.66 0 3 1.34 3 3H9c0-1.66 1.34-3 3-3zm0 10c-2.76 0-5-2.24-5-5h2c0 1.66 1.34 3 3 3s3-1.34 3-3h2c0 2.76-2.24 5-5 5z"/>
                                </svg>
                            </div>
                            <div class="feature-content">
                                <h6>100% Algod√≥n premium</h6>
                                <p>Calidad garantizada</p>
                            </div>
                        </div>
                    </div>

                    <!-- Tags -->
                    @if (Model.ProductTags?.Any(pt => pt.IsActive && pt.Tag != null && pt.Tag.IsActive) == true)
                    {
                        <div class="product-tags">
                            <label class="section-label-kaira">Colecciones</label>
                            <div class="tags-list">
                                @foreach (var pt in Model.ProductTags
                                    .Where(pt => pt.IsActive && pt.Tag != null && pt.Tag.IsActive)
                                    .OrderBy(pt => pt.Tag!.Name))
                                {
                                    <a href="/catalogo?tag=@pt.Tag!.Slug" class="tag-item">
                                        @pt.Tag!.Name
                                    </a>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts {
<script>
(function() {
    'use strict';

    // Elementos del DOM
    const mainImage = document.getElementById('mainProductImage');
    const thumbnails = document.querySelectorAll('.thumbnail-item');
    const sizeOptions = document.querySelectorAll('.size-option-kaira');
    const quantityInput = document.getElementById('quantity');
    const decreaseBtn = document.getElementById('decreaseQty');
    const increaseBtn = document.getElementById('increaseQty');
    const btnAddToCart = document.getElementById('btnAddToCart');
    const btnBuyNow = document.getElementById('btnBuyNow');
    const btnWishlist = document.getElementById('btnWishlist');
    
    // Datos del producto
    const productData = {
        id: @Model.Id,
        name: '@Html.Raw(Model.Name.Replace("'", "\\'"))',
        price: @Model.BasePrice,
        image: '@Html.Raw((productImages.Any() ? productImages[0] : "/images/placeholder.png").Replace("'", "\\'"))'
    };

    // Im√°genes del producto
    const productImagesArray = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(productImages));
    const showThumbnails = productImagesArray.length > 1;

     console.log('üì∑ Sistema h√≠brido - Im√°genes cargadas:', {
        total: productImagesArray.length,
        images: productImagesArray,
        source: @(usingOldSystem ? "'sistema-antiguo'" : "'sistema-nuevo'")
    });

    // Galer√≠a de im√°genes (solo si hay m√∫ltiples im√°genes)
    if (showThumbnails) {
        thumbnails.forEach((thumb) => {
            thumb.addEventListener('click', function() {
                thumbnails.forEach(t => t.classList.remove('active'));
                this.classList.add('active');
                
                const newImageSrc = this.getAttribute('data-image');
                if (newImageSrc) {
                    // Efecto de transici√≥n suave
                    mainImage.style.opacity = '0.7';
                    setTimeout(() => {
                        mainImage.src = newImageSrc;
                        mainImage.style.opacity = '1';
                    }, 150);
                    
                    console.log('üñºÔ∏è Imagen cambiada a:', newImageSrc);
                }
            });
        });
    }

    // Manejo de errores en im√°genes
    mainImage.addEventListener('error', function() {
        console.warn('‚ùå Error cargando imagen principal, usando placeholder');
        this.src = '/images/placeholder.png';
    });



    // Selector de tallas
    sizeOptions.forEach(option => {
        option.addEventListener('click', function() {
            sizeOptions.forEach(opt => opt.classList.remove('selected'));
            this.classList.add('selected');
            this.querySelector('input').checked = true;
            console.log('üìè Talla seleccionada:', this.querySelector('input').value);
        });
    });

    // Seleccionar talla M por defecto
    const defaultSize = document.querySelector('input[value="M"]');
    if (defaultSize) {
        defaultSize.closest('.size-option-kaira').classList.add('selected');
    }

    // Control de cantidad
    decreaseBtn.addEventListener('click', function() {
        let currentValue = parseInt(quantityInput.value);
        if (currentValue > 1) {
            quantityInput.value = currentValue - 1;
        }
    });

    increaseBtn.addEventListener('click', function() {
        let currentValue = parseInt(quantityInput.value);
        let maxValue = parseInt(quantityInput.max);
        if (currentValue < maxValue) {
            quantityInput.value = currentValue + 1;
        }
    });

    // Funci√≥n para obtener datos del producto seleccionado
    function getSelectedProduct() {
        const selectedSize = document.querySelector('input[name="size"]:checked');
        const quantity = parseInt(quantityInput.value);

        return {
            ...productData,
            size: selectedSize ? selectedSize.value : null,
            quantity: quantity,
            total: productData.price * quantity
        };
    }

    // Formatear precio
    function formatPrice(amount) {
        return new Intl.NumberFormat('es-MX', {
            style: 'currency',
            currency: 'MXN'
        }).format(amount);
    }

    // Agregar al carrito
    btnAddToCart.addEventListener('click', function() {
        const product = getSelectedProduct();
        
        if (!product.size) {
            alert('‚ö†Ô∏è Por favor selecciona una talla');
            return;
        }

        console.log('üõí Agregando al carrito:', product);
        
        // Animaci√≥n del bot√≥n
        const originalText = this.innerHTML;
        this.innerHTML = '<svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor"><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/></svg> ¬°Agregado!';
        this.style.background = '#4CAF50';
        
        setTimeout(() => {
            this.innerHTML = originalText;
            this.style.background = '';
        }, 2000);

        alert(`‚úÖ Producto agregado al carrito\n\n${product.name}\nTalla: ${product.size}\nCantidad: ${product.quantity}\nTotal: ${formatPrice(product.total)}`);
    });

    // Comprar ahora
    btnBuyNow.addEventListener('click', function() {
        const product = getSelectedProduct();
        
        if (!product.size) {
            alert('‚ö†Ô∏è Por favor selecciona una talla');
            return;
        }

        console.log('‚ö° Compra directa:', product);
        alert(`‚ö° Procesando compra directa\n\n${product.name}\nTalla: ${product.size}\nCantidad: ${product.quantity}\nTotal: ${formatPrice(product.total)}`);
    });

    // Lista de deseos
    btnWishlist.addEventListener('click', function() {
        this.classList.toggle('active');
        const svg = this.querySelector('svg');
        
        if (this.classList.contains('active')) {
            svg.setAttribute('fill', 'currentColor');
            svg.setAttribute('stroke', 'none');
            console.log('üíñ Agregado a favoritos');
        } else {
            svg.setAttribute('fill', 'none');
            svg.setAttribute('stroke', 'currentColor');
            console.log('üíî Removido de favoritos');
        }
    });

    console.log('‚úÖ Vista de producto inicializada - Sistema H√≠brido');
})();
</script>
}