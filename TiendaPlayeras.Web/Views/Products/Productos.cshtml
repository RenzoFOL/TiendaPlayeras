@model TiendaPlayeras.Web.Models.Product
@{
    ViewData["Title"] = Model.Name;
    
    // Obtener solo variantes activas
    var activeVariants = (Model.Variants ?? new List<TiendaPlayeras.Web.Models.ProductVariant>())
        .Where(v => v.IsActive)
        .ToList();
    
    // Función para parsear CSV
    string[] ParseCsv(string? csv) 
    {
        if (string.IsNullOrWhiteSpace(csv)) return Array.Empty<string>();
        return csv.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
    }
    
    // Determinar qué mostrar según configuración
    var allowedFits = ParseCsv(Model.AllowedFitsCsv);
    var allowedColors = ParseCsv(Model.AllowedColorsCsv);
    var allowedSizes = ParseCsv(Model.AllowedSizesCsv);
    
    // Si están vacíos, inferir de variantes activas
    var fits = allowedFits.Any() 
        ? allowedFits 
        : activeVariants.Select(v => v.Fit).Distinct().OrderBy(f => f).ToArray();
    
    var colors = allowedColors.Any() 
        ? allowedColors 
        : activeVariants.Select(v => v.Color).Distinct().OrderBy(c => c).ToArray();
    
    var sizes = allowedSizes.Any() 
        ? allowedSizes 
        : activeVariants.Select(v => v.Size).Distinct().OrderBy(s => s).ToArray();
    
    // Filtrar solo las que existen en variantes activas
    fits = fits.Where(f => activeVariants.Any(v => v.Fit == f)).ToArray();
    colors = colors.Where(c => activeVariants.Any(v => v.Color == c)).ToArray();
    sizes = sizes.Where(s => activeVariants.Any(v => v.Size == s)).ToArray();
    
    // Precio mínimo
    decimal minPrice = activeVariants.Any() 
        ? activeVariants.Min(v => v.Price > 0 ? v.Price : Model.BasePrice) 
        : Model.BasePrice;
    
    // Imagen
    string imgPath = string.IsNullOrWhiteSpace(Model.MainImagePath) 
        ? "/img/placeholder.png" 
        : Model.MainImagePath;
}

<div class="container my-4">
    <div class="row g-4">
        <!-- Imagen del producto -->
        <div class="col-12 col-md-6">
            <div class="position-relative">
                <div class="ratio ratio-1x1 bg-light rounded shadow-sm overflow-hidden">
                    <img src="@imgPath" class="w-100 h-100 object-fit-cover" 
                         alt="@Model.Name" id="mainImage" />
                </div>
                
                @if (Model.IsCustomizable)
                {
                    <div class="position-absolute top-0 end-0 m-3">
                        <span class="badge bg-info fs-6">
                            <i class="fas fa-paint-brush"></i> Personalizable
                        </span>
                    </div>
                }
            </div>
        </div>

        <!-- Información y selectores -->
        <div class="col-12 col-md-6">
            <nav aria-label="breadcrumb" class="mb-3">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/catalogo">Catálogo</a>
                    </li>
                    <li class="breadcrumb-item active">@Model.Name</li>
                </ol>
            </nav>

            <h1 class="h2 mb-3">@Model.Name</h1>

            <!-- Precio -->
            <div class="mb-3">
                <span class="h3 text-primary fw-bold" id="priceDisplay">
                    @minPrice.ToString("C")
                </span>
                @if (activeVariants.Any())
                {
                    <small class="text-muted ms-2">
                        <i class="fas fa-info-circle"></i> 
                        El precio puede variar según la variante
                    </small>
                }
            </div>

            <!-- Descripción -->
            @if (!string.IsNullOrWhiteSpace(Model.Description))
            {
                <div class="mb-4">
                    <p class="text-muted">@Model.Description</p>
                </div>
            }

            <!-- Selectores de variantes -->
            @if (activeVariants.Any())
            {
                <div class="card mb-4 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title mb-3">
                            <i class="fas fa-sliders-h"></i> Selecciona tu variante
                        </h5>
                        
                        <div class="row g-3">
                            <!-- Selector de Fit -->
                            @if (Model.UseFit && fits.Any())
                            {
                                <div class="col-12 col-sm-6">
                                    <label class="form-label fw-bold">
                                        <i class="fas fa-tshirt text-primary"></i> Fit
                                    </label>
                                    <select id="fitSelector" class="form-select">
                                        <option value="">Selecciona un fit</option>
                                        @foreach (var fit in fits)
                                        {
                                            <option value="@fit">@fit</option>
                                        }
                                    </select>
                                </div>
                            }

                            <!-- Selector de Color -->
                            @if (Model.UseColor && colors.Any())
                            {
                                <div class="col-12 col-sm-6">
                                    <label class="form-label fw-bold">
                                        <i class="fas fa-palette text-primary"></i> Color
                                    </label>
                                    <select id="colorSelector" class="form-select">
                                        <option value="">Selecciona un color</option>
                                        @foreach (var color in colors)
                                        {
                                            <option value="@color">@color</option>
                                        }
                                    </select>
                                </div>
                            }

                            <!-- Selector de Talla -->
                            @if (Model.UseSize && sizes.Any())
                            {
                                <div class="col-12 col-sm-6">
                                    <label class="form-label fw-bold">
                                        <i class="fas fa-ruler-combined text-primary"></i> Talla
                                    </label>
                                    <select id="sizeSelector" class="form-select">
                                        <option value="">Selecciona una talla</option>
                                        @foreach (var size in sizes)
                                        {
                                            <option value="@size">@size</option>
                                        }
                                    </select>
                                </div>
                            }

                            <!-- Cantidad -->
                            <div class="col-12 col-sm-6">
                                <label class="form-label fw-bold">
                                    <i class="fas fa-sort-numeric-up text-primary"></i> Cantidad
                                </label>
                                <input type="number" id="quantityInput" class="form-control" 
                                       min="1" max="99" value="1" />
                            </div>
                        </div>

                        <!-- Estado de stock -->
                        <div class="mt-3">
                            <div id="stockStatus" class="alert alert-info mb-0">
                                <i class="fas fa-info-circle"></i> 
                                Selecciona una variante para ver disponibilidad
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Botones de acción -->
                <div class="d-grid gap-2 mb-3">
                    <button id="btnAddToCart" class="btn btn-primary btn-lg" disabled>
                        <i class="fas fa-shopping-cart"></i> Agregar al carrito
                    </button>
                    <button id="btnWishlist" class="btn btn-outline-danger">
                        <i class="far fa-heart"></i> Agregar a favoritos
                    </button>
                </div>

                <!-- Información adicional -->
                <div class="card border-0 bg-light">
                    <div class="card-body">
                        <ul class="list-unstyled mb-0 small">
                            <li class="mb-2">
                                <i class="fas fa-truck text-success"></i> 
                                Envío gratis en compras mayores a $500
                            </li>
                            <li class="mb-2">
                                <i class="fas fa-undo text-info"></i> 
                                Devoluciones gratuitas dentro de 30 días
                            </li>
                            <li>
                                <i class="fas fa-shield-alt text-warning"></i> 
                                Compra 100% segura
                            </li>
                        </ul>
                    </div>
                </div>

                <input type="hidden" id="selectedVariantId" />
            }
            else
            {
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    Este producto no tiene variantes disponibles en este momento.
                </div>
            }

            <!-- Tags del producto -->
            @if (Model.ProductTags?.Any(pt => pt.IsActive && pt.Tag != null && pt.Tag.IsActive) == true)
            {
                <hr class="my-4" />
                <div>
                    <strong class="d-block mb-2">
                        <i class="fas fa-tags"></i> Colecciones:
                    </strong>
                    <div class="d-flex flex-wrap gap-2">
                        @foreach (var pt in Model.ProductTags
                            .Where(pt => pt.IsActive && pt.Tag != null && pt.Tag.IsActive)
                            .OrderBy(pt => pt.Tag!.Name))
                        {
                            <a href="/catalogo?tag=@pt.Tag!.Slug" 
                               class="badge bg-light text-dark border text-decoration-none">
                                <i class="fas fa-tag"></i> @pt.Tag!.Name
                            </a>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
<script>
(function() {
    'use strict';
    
    // Datos de variantes desde el servidor
    const variants = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
        activeVariants.Select(v => new {
            id = v.Id,
            fit = v.Fit ?? "",
            color = v.Color ?? "",
            size = v.Size ?? "",
            price = (double)v.Price,
            stock = v.Stock
        })
    ));

    // Elementos del DOM
    const fitSelect = document.getElementById('fitSelector');
    const colorSelect = document.getElementById('colorSelector');
    const sizeSelect = document.getElementById('sizeSelector');
    const quantityInput = document.getElementById('quantityInput');
    const priceDisplay = document.getElementById('priceDisplay');
    const stockStatus = document.getElementById('stockStatus');
    const selectedVariantId = document.getElementById('selectedVariantId');
    const btnAddToCart = document.getElementById('btnAddToCart');
    const btnWishlist = document.getElementById('btnWishlist');

    // Función para formatear precio
    function formatPrice(amount) {
        try {
            return new Intl.NumberFormat('es-MX', {
                style: 'currency',
                currency: 'MXN'
            }).format(amount);
        } catch {
            return '$' + amount.toFixed(2);
        }
    }

    // Obtener selección actual
    function getCurrentSelection() {
        return {
            fit: fitSelect ? fitSelect.value : '',
            color: colorSelect ? colorSelect.value : '',
            size: sizeSelect ? sizeSelect.value : ''
        };
    }

    // Filtrar variantes según selección
    function getMatchingVariants() {
        const selection = getCurrentSelection();
        
        return variants.filter(v => {
            const fitMatch = !selection.fit || v.fit === selection.fit;
            const colorMatch = !selection.color || v.color === selection.color;
            const sizeMatch = !selection.size || v.size === selection.size;
            
            return fitMatch && colorMatch && sizeMatch;
        });
    }

    // Actualizar UI según variantes disponibles
    function updateUI() {
        const matches = getMatchingVariants();
        
        if (matches.length === 1) {
            // Una sola variante coincide - mostrar detalles
            const variant = matches[0];
            
            priceDisplay.textContent = formatPrice(variant.price);
            selectedVariantId.value = variant.id;
            
            if (variant.stock > 0) {
                stockStatus.className = 'alert alert-success mb-0';
                stockStatus.innerHTML = `
                    <i class="fas fa-check-circle"></i> 
                    <strong>Disponible</strong> - ${variant.stock} unidad${variant.stock > 1 ? 'es' : ''} en stock
                `;
                btnAddToCart.disabled = false;
                
                // Limitar cantidad máxima al stock
                quantityInput.max = variant.stock;
                if (parseInt(quantityInput.value) > variant.stock) {
                    quantityInput.value = variant.stock;
                }
            } else {
                stockStatus.className = 'alert alert-danger mb-0';
                stockStatus.innerHTML = `
                    <i class="fas fa-times-circle"></i> 
                    <strong>Sin stock</strong> - Esta combinación no está disponible
                `;
                btnAddToCart.disabled = true;
            }
            
        } else if (matches.length > 1) {
            // Varias variantes coinciden - mostrar rango de precio
            const prices = matches.map(v => v.price);
            const minPrice = Math.min(...prices);
            const maxPrice = Math.max(...prices);
            
            if (minPrice === maxPrice) {
                priceDisplay.textContent = formatPrice(minPrice);
            } else {
                priceDisplay.textContent = `${formatPrice(minPrice)} - ${formatPrice(maxPrice)}`;
            }
            
            stockStatus.className = 'alert alert-warning mb-0';
            stockStatus.innerHTML = `
                <i class="fas fa-info-circle"></i> 
                Selecciona todos los atributos para ver disponibilidad
            `;
            
            selectedVariantId.value = '';
            btnAddToCart.disabled = true;
            
        } else {
            // Ninguna variante coincide
            priceDisplay.textContent = formatPrice(@Model.BasePrice);
            
            stockStatus.className = 'alert alert-danger mb-0';
            stockStatus.innerHTML = `
                <i class="fas fa-exclamation-triangle"></i> 
                <strong>No disponible</strong> - Esta combinación no existe
            `;
            
            selectedVariantId.value = '';
            btnAddToCart.disabled = true;
        }
    }

    // Event listeners para selectores
    [fitSelect, colorSelect, sizeSelect].forEach(select => {
        if (select) {
            select.addEventListener('change', updateUI);
        }
    });

    // Validar cantidad
    if (quantityInput) {
        quantityInput.addEventListener('input', function() {
            const val = parseInt(this.value);
            const min = parseInt(this.min);
            const max = parseInt(this.max);
            
            if (val < min) this.value = min;
            if (val > max) this.value = max;
        });
    }

    // Botón de wishlist (placeholder)
    if (btnWishlist) {
        btnWishlist.addEventListener('click', function() {
            this.classList.toggle('btn-outline-danger');
            this.classList.toggle('btn-danger');
            
            const icon = this.querySelector('i');
            if (icon) {
                icon.classList.toggle('far');
                icon.classList.toggle('fas');
            }
            
            const isActive = this.classList.contains('btn-danger');
            if (isActive) {
                this.innerHTML = '<i class="fas fa-heart"></i> En favoritos';
            } else {
                this.innerHTML = '<i class="far fa-heart"></i> Agregar a favoritos';
            }
        });
    }

    // Botón de agregar al carrito (placeholder)
    if (btnAddToCart) {
        btnAddToCart.addEventListener('click', function() {
            const variantId = selectedVariantId.value;
            const quantity = parseInt(quantityInput.value);
            
            if (!variantId) {
                alert('Por favor selecciona una variante válida.');
                return;
            }
            
            if (quantity < 1) {
                alert('La cantidad debe ser al menos 1.');
                return;
            }
            
            // TODO: Implementar lógica de carrito
            console.log('Agregar al carrito:', {
                variantId: variantId,
                quantity: quantity
            });
            
            alert(`Producto agregado al carrito (cantidad: ${quantity})\n\nEsta funcionalidad será implementada próximamente.`);
        });
    }

    // Inicializar UI
    updateUI();
    
})();
</script>
}