@model TiendaPlayeras.Web.Models.Product
@using System.Text.Json
@{
    ViewData["Title"] = Model.Name;
    var variantsJson = JsonSerializer.Serialize(
        (Model.Variants ?? new List<TiendaPlayeras.Web.Models.ProductVariant>())
            .Select(v => new {
                id = v.Id,
                fit = v.Fit ?? "",
                color = v.Color ?? "",
                size = v.Size ?? "",
                price = v.Price > 0 ? v.Price : Model.BasePrice,
                stock = v.Stock,
                isActive = v.IsActive
            })
    );
}

<style>
.product-page { max-width: 1100px; margin: 30px auto; }
.gallery { border-radius: 16px; overflow: hidden; box-shadow: 0 10px 30px rgba(0,0,0,.08) }
.gallery img { width: 100%; display:block; }
.badge-tag { display:inline-block; padding:.35rem .6rem; border-radius:999px; background:#f1f5f9; margin:.2rem .2rem 0 0; font-weight:600; font-size:.85rem }
.price { font-size:2rem; font-weight:800; letter-spacing:.5px }
.stock-ok { color:#16a34a; font-weight:700 }
.stock-out { color:#dc2626; font-weight:700 }
.selector label { display:block; font-weight:700; margin-bottom:.4rem }
.selector .chips { display:flex; gap:.5rem; flex-wrap:wrap }
.selector .chip { padding:.5rem .85rem; border:2px solid #e2e8f0; border-radius:12px; cursor:pointer; user-select:none }
.selector .chip.active { border-color:#6366f1; box-shadow:0 0 0 4px rgba(99,102,241,.15) }
.selector .swatch { width:34px; height:34px; border-radius:8px; border:2px solid #e2e8f0; cursor:pointer; position:relative }
.selector .swatch.active { border-color:#6366f1; box-shadow:0 0 0 4px rgba(99,102,241,.15) }
.selector select { padding:.65rem .8rem; border:2px solid #e2e8f0; border-radius:12px; font-weight:600 }
.actions { display:flex; gap:.75rem; flex-wrap:wrap; margin-top:1rem }
.btn-primary { background:#6366f1; color:white; border:none; padding:.8rem 1.2rem; border-radius:12px; font-weight:800 }
.btn-ghost { background:white; color:#111827; border:2px solid #e5e7eb; padding:.8rem 1.1rem; border-radius:12px; font-weight:800 }
.btn-primary:disabled { opacity:.5; cursor:not-allowed }
.variants-table { width:100%; margin-top:25px; border-collapse:collapse; font-size:.95rem }
.variants-table th, .variants-table td { border-bottom:1px solid #e5e7eb; padding:.6rem .4rem; text-align:left }
</style>

<div class="product-page">
    <div class="row g-4">
        <div class="col-md-6">
            <div class="gallery">
                <img id="mainImg" src="@Model.MainImagePath" alt="@Model.Name">
            </div>
        </div>
        <div class="col-md-6">
            <h1>@Model.Name</h1>

            <div style="margin:.4rem 0 1rem 0;">
                @foreach (var pt in (Model.ProductTags ?? new List<TiendaPlayeras.Web.Models.ProductTag>())
                    .Where(x => x.IsActive && x.Tag != null && x.Tag.IsActive)
                    .OrderBy(x => x.Tag!.Name))
                {
                    <span class="badge-tag"><i class="fas fa-tag"></i> @pt.Tag!.Name</span>
                }
            </div>

            <div class="price">
                $<span id="priceSpan">@Model.BasePrice.ToString("0.00")</span> MXN
            </div>
            <div id="stockSpan" class="stock-ok" style="margin-bottom:12px;">En stock</div>

            <div class="selector" style="margin-top:10px;">
                <label>Fit</label>
                <div id="fitChips" class="chips"></div>
            </div>

            <div class="selector" style="margin-top:10px;">
                <label>Color</label>
                <div id="colorSwatches" class="chips"></div>
            </div>

            <div class="selector" style="margin-top:10px;">
                <label>Talla</label>
                <select id="sizeSelect"></select>
            </div>

            <div class="actions">
                <button class="btn-primary" id="addCartBtn" disabled>
                    <i class="fas fa-shopping-cart"></i> Agregar al carrito
                </button>
                <button class="btn-ghost" id="wishBtn" aria-pressed="false">
                    <i class="far fa-heart"></i> Wishlist
                </button>
            </div>

            <div style="margin-top:18px; color:#4b5563; white-space:pre-line">
                @Model.Description
            </div>
        </div>
    </div>

    <h3 style="margin-top:40px;">Variantes disponibles</h3>
    <table class="variants-table">
        <thead>
            <tr>
                <th>Fit</th><th>Color</th><th>Talla</th><th>Precio</th><th>Stock</th><th>Activo</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var v in (Model.Variants ?? new List<TiendaPlayeras.Web.Models.ProductVariant>())
            .OrderBy(v => v.Fit).ThenBy(v => v.Color).ThenBy(v => v.Size))
        {
            <tr>
                <td>@v.Fit</td>
                <td>@v.Color</td>
                <td>@v.Size</td>
                <td>$@((v.Price > 0 ? v.Price : Model.BasePrice).ToString("0.00"))</td>
                <td>@v.Stock</td>
                <td>@(v.IsActive ? "Sí" : "No")</td>
            </tr>
        }
        </tbody>
    </table>
</div>

@section Scripts {
<script>
(() => {
    const variants = @Html.Raw(variantsJson);

    const uniq = arr => [...new Set(arr.filter(Boolean))];

    const priceSpan = document.getElementById('priceSpan');
    const stockSpan = document.getElementById('stockSpan');
    const addCartBtn = document.getElementById('addCartBtn');

    const fitChips = document.getElementById('fitChips');
    const colorSwatches = document.getElementById('colorSwatches');
    const sizeSelect = document.getElementById('sizeSelect');

    let sel = { fit: null, color: null, size: null };

    const allFits = uniq(variants.map(v => v.fit)).sort();
    const allColors = uniq(variants.map(v => v.color)).sort();
    const allSizes = uniq(variants.map(v => v.size)).sort();

    function renderFits() {
        fitChips.innerHTML = '';
        allFits.forEach(f => {
            const chip = document.createElement('div');
            chip.className = 'chip';
            chip.textContent = f || 'Único';
            if (sel.fit === f) chip.classList.add('active');
            chip.onclick = () => { sel.fit = (sel.fit === f ? null : f); renderAll(); };
            fitChips.appendChild(chip);
        });
    }

    function renderColors() {
        colorSwatches.innerHTML = '';
        const colors = uniq(variants
            .filter(v => !sel.fit || v.fit === sel.fit)
            .map(v => v.color)).sort();

        colors.forEach(c => {
            const sw = document.createElement('div');
            sw.className = 'swatch';
            sw.title = c || 'Color';
            if (/^#?([0-9A-F]{3}){1,2}$/i.test(c)) {
                sw.style.background = c.startsWith('#') ? c : '#'+c;
            } else {
                sw.style.background = '#fff';
                sw.style.backgroundImage = 'linear-gradient(135deg, #f9fafb 0%, #e5e7eb 100%)';
            }
            if (sel.color === c) sw.classList.add('active');
            sw.onclick = () => { sel.color = (sel.color === c ? null : c); renderAll(); };
            colorSwatches.appendChild(sw);
        });
    }

    function renderSizes() {
        sizeSelect.innerHTML = '';
        const sizes = uniq(variants
            .filter(v => (!sel.fit || v.fit === sel.fit) && (!sel.color || v.color === sel.color))
            .map(v => v.size)).sort();

        sizes.forEach(s => {
            const opt = document.createElement('option');
            opt.value = s; opt.textContent = s || 'Única';
            if (sel.size === s) opt.selected = true;
            sizeSelect.appendChild(opt);
        });

        if (!sel.size && sizes.length) sel.size = sizes[0];

        sizeSelect.onchange = () => { sel.size = sizeSelect.value; updatePriceStock(); };
    }

    function currentVariant() {
        return variants.find(v =>
            (!sel.fit   || v.fit === sel.fit) &&
            (!sel.color || v.color === sel.color) &&
            (!sel.size  || v.size === sel.size)
        );
    }

    function updatePriceStock() {
        const v = currentVariant();
        if (v) {
            priceSpan.textContent = (v.price || 0).toFixed(2);
            if (v.isActive && v.stock > 0) {
                stockSpan.textContent = `En stock (${v.stock})`;
                stockSpan.className = 'stock-ok';
                addCartBtn.disabled = false;
            } else {
                stockSpan.textContent = v.isActive ? 'Sin stock' : 'No disponible';
                stockSpan.className = 'stock-out';
                addCartBtn.disabled = true;
            }
        } else {
            const minPrice = variants.reduce((m,v) => Math.min(m, v.price || 999999), 999999);
            priceSpan.textContent = isFinite(minPrice) ? minPrice.toFixed(2) : '0.00';
            stockSpan.textContent = 'Selecciona una combinación';
            stockSpan.className = 'stock-out';
            addCartBtn.disabled = true;
        }
    }

    function renderAll() {
        renderFits();
        renderColors();
        renderSizes();
        updatePriceStock();
    }

    const wishBtn = document.getElementById('wishBtn');
    wishBtn.addEventListener('click', () => {
        const pressed = wishBtn.getAttribute('aria-pressed') === 'true';
        wishBtn.setAttribute('aria-pressed', String(!pressed));
        wishBtn.innerHTML = pressed
          ? '<i class="far fa-heart"></i> Wishlist'
          : '<i class="fas fa-heart"></i> En wishlist';
    });

    addCartBtn.addEventListener('click', (e) => {
        e.preventDefault();
        const v = currentVariant();
        if (!v) return;
        addCartBtn.textContent = 'Agregado ✓';
        setTimeout(() => addCartBtn.innerHTML = '<i class="fas fa-shopping-cart"></i> Agregar al carrito', 1200);
    });

    if (allFits.length === 1) sel.fit = allFits[0];
    if (allColors.length === 1) sel.color = allColors[0];
    if (allSizes.length === 1) sel.size = allSizes[0];

    renderAll();
})();
</script>
}
