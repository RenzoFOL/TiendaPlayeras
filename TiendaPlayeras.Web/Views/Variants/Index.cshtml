@model TiendaPlayeras.Web.Models.ViewModels.VariantsAdminViewModel
@using System.Linq

@{
    ViewData["Title"] = $"Variantes - {Model.Product.Name}";
    var product = Model.Product;
    
    string GetCsvValue(string? csv) => string.IsNullOrWhiteSpace(csv) ? "" : csv;
    
    var allowedFits = GetCsvValue(product.AllowedFitsCsv)
        .Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
        .ToList();
    
    var allowedColors = GetCsvValue(product.AllowedColorsCsv)
        .Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
        .ToList();
    
    var allowedSizes = GetCsvValue(product.AllowedSizesCsv)
        .Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
        .ToList();
}

<div class="container-fluid py-4">
    <!-- Encabezado -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">
                <i class="fas fa-th-large text-primary"></i> 
                Variantes de: <strong>@product.Name</strong>
            </h2>
            <div class="text-muted">Producto #@product.Id</div>
            
            @if (product.ProductTags?.Any(pt => pt.IsActive && pt.Tag != null && pt.Tag.IsActive) == true)
            {
                <div class="mt-2">
                    @foreach (var pt in product.ProductTags
                        .Where(x => x.IsActive && x.Tag != null && x.Tag.IsActive)
                        .OrderBy(x => x.Tag!.Name))
                    {
                        <span class="badge bg-light text-dark border me-1">
                            <i class="fas fa-tag"></i> @pt.Tag!.Name
                        </span>
                    }
                </div>
            }
        </div>
        <div>
            <a class="btn btn-outline-secondary me-2" asp-action="Index" asp-controller="Products">
                <i class="fas fa-arrow-left"></i> Volver a productos
            </a>
            <a class="btn btn-primary" asp-action="CreateVariant" asp-route-productId="@product.Id">
                <i class="fas fa-plus"></i> Nueva variante
            </a>
        </div>
    </div>

    <!-- Mensajes -->
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show">
            <i class="fas fa-check-circle"></i> @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show">
            <i class="fas fa-exclamation-circle"></i> @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Configuración de Opciones -->
    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0"><i class="fas fa-cog"></i> Configuración de opciones visibles en la tienda</h5>
        </div>
        <div class="card-body">
            <form asp-action="SaveVariantOptions" asp-controller="Products" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" name="productId" value="@product.Id" />

                <div class="row g-4">
                    <!-- FIT -->
                    <div class="col-12 col-lg-4">
                        <div class="border rounded p-3 h-100">
                            <div class="form-check form-switch mb-3">
                                <input class="form-check-input" type="checkbox" id="useFit" 
                                       name="useFit" @(product.UseFit ? "checked" : "") />
                                <label class="form-check-label fw-bold" for="useFit">
                                    <i class="fas fa-tshirt"></i> Mostrar selector de Fit
                                </label>
                            </div>

                            <label class="form-label text-muted small">FITS PERMITIDOS</label>
                            <div class="d-flex flex-wrap gap-2 mb-3">
                                @foreach (var fit in Model.PredefinedFits)
                                {
                                    var isChecked = allowedFits.Contains(fit);
                                    <div>
                                        <input type="checkbox" class="btn-check fitCheck" 
                                               id="fit_@fit" value="@fit" @(isChecked ? "checked" : "") />
                                        <label class="btn btn-sm btn-outline-primary" for="fit_@fit">
                                            @fit
                                        </label>
                                    </div>
                                }
                            </div>

                            <label class="form-label small">O escribe CSV personalizado:</label>
                            <input type="text" class="form-control form-control-sm" 
                                   id="allowedFitsCsv" name="allowedFitsCsv" 
                                   value="@GetCsvValue(product.AllowedFitsCsv)" 
                                   placeholder="Hombre,Mujer,Unisex,Oversize,Boxy" />
                            <div class="form-text">Vacío = se mostrarán todos los fits de las variantes activas</div>
                        </div>
                    </div>

                    <!-- COLOR -->
                    <div class="col-12 col-lg-4">
                        <div class="border rounded p-3 h-100">
                            <div class="form-check form-switch mb-3">
                                <input class="form-check-input" type="checkbox" id="useColor" 
                                       name="useColor" @(product.UseColor ? "checked" : "") />
                                <label class="form-check-label fw-bold" for="useColor">
                                    <i class="fas fa-palette"></i> Mostrar selector de Color
                                </label>
                            </div>

                            <label class="form-label text-muted small">COLORES PERMITIDOS</label>
                            <div class="d-flex flex-wrap gap-2 mb-3">
                                @foreach (var color in Model.PredefinedColors)
                                {
                                    var isChecked = allowedColors.Contains(color);
                                    <div>
                                        <input type="checkbox" class="btn-check colorCheck" 
                                               id="color_@color.Replace("#", "hex")" value="@color" 
                                               @(isChecked ? "checked" : "") />
                                        <label class="btn btn-sm btn-outline-secondary" 
                                               for="color_@color.Replace("#", "hex")">
                                            @color
                                        </label>
                                    </div>
                                }
                            </div>

                            <label class="form-label small">O escribe CSV personalizado:</label>
                            <input type="text" class="form-control form-control-sm" 
                                   id="allowedColorsCsv" name="allowedColorsCsv" 
                                   value="@GetCsvValue(product.AllowedColorsCsv)" 
                                   placeholder="Negro,Blanco,Rojo,Azul,#000000,#FFFFFF" />
                            <div class="form-text">Puedes usar nombres o códigos HEX (#RRGGBB)</div>
                        </div>
                    </div>

                    <!-- SIZE -->
                    <div class="col-12 col-lg-4">
                        <div class="border rounded p-3 h-100">
                            <div class="form-check form-switch mb-3">
                                <input class="form-check-input" type="checkbox" id="useSize" 
                                       name="useSize" @(product.UseSize ? "checked" : "") />
                                <label class="form-check-label fw-bold" for="useSize">
                                    <i class="fas fa-ruler-combined"></i> Mostrar selector de Talla
                                </label>
                            </div>

                            <label class="form-label text-muted small">TALLAS PERMITIDAS</label>
                            <div class="d-flex flex-wrap gap-2 mb-3">
                                @foreach (var size in Model.PredefinedSizes)
                                {
                                    var isChecked = allowedSizes.Contains(size);
                                    <div>
                                        <input type="checkbox" class="btn-check sizeCheck" 
                                               id="size_@size" value="@size" @(isChecked ? "checked" : "") />
                                        <label class="btn btn-sm btn-outline-success" for="size_@size">
                                            @size
                                        </label>
                                    </div>
                                }
                            </div>

                            <label class="form-label small">O escribe CSV personalizado:</label>
                            <input type="text" class="form-control form-control-sm" 
                                   id="allowedSizesCsv" name="allowedSizesCsv" 
                                   value="@GetCsvValue(product.AllowedSizesCsv)" 
                                   placeholder="XS,S,M,L,XL,XXL,Yasui" />
                            <div class="form-text">Vacío = se mostrarán todas las tallas de las variantes activas</div>
                        </div>
                    </div>
                </div>

                <div class="text-center mt-4">
                    <button type="submit" class="btn btn-success btn-lg px-5">
                        <i class="fas fa-save"></i> Guardar configuración
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Tabla de Variantes -->
    <div class="card shadow-sm">
        <div class="card-header bg-light">
            <h5 class="mb-0"><i class="fas fa-list"></i> Variantes existentes (@Model.Variants.Count)</h5>
        </div>
        <div class="card-body p-0">
            @if (Model.Variants.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover table-striped mb-0">
                        <thead class="table-dark">
                            <tr>
                                <th>Fit</th>
                                <th>Color</th>
                                <th>Talla</th>
                                <th>Diseño</th>
                                <th class="text-end">Precio</th>
                                <th class="text-center">Stock</th>
                                <th class="text-center">Estado</th>
                                <th class="text-center">Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var v in Model.Variants)
                            {
                                <tr class="@(v.IsActive ? "" : "table-secondary text-muted")">
                                    <td>
                                        <i class="fas fa-tshirt text-primary"></i> 
                                        <strong>@v.Fit</strong>
                                    </td>
                                    <td>
                                        <i class="fas fa-circle" style="color: @(v.Color.StartsWith("#") ? v.Color : "currentColor")"></i>
                                        @v.Color
                                    </td>
                                    <td><span class="badge bg-info">@v.Size</span></td>
                                    <td class="text-muted small">@(string.IsNullOrWhiteSpace(v.DesignCode) ? "-" : v.DesignCode)</td>
                                    <td class="text-end fw-bold">@v.Price.ToString("C")</td>
                                    <td class="text-center">
                                        @if (v.Stock > 10)
                                        {
                                            <span class="badge bg-success">@v.Stock</span>
                                        }
                                        else if (v.Stock > 0)
                                        {
                                            <span class="badge bg-warning text-dark">@v.Stock</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">Agotado</span>
                                        }
                                    </td>
                                    <td class="text-center">
                                        @if (v.IsActive)
                                        {
                                            <span class="badge bg-success"><i class="fas fa-check"></i> Activa</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary"><i class="fas fa-ban"></i> Inactiva</span>
                                        }
                                    </td>
                                    <td class="text-center">
                                        <div class="btn-group btn-group-sm">
                                            <a class="btn btn-outline-primary" 
                                               asp-action="EditVariant" asp-route-id="@v.Id" 
                                               title="Editar">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <form asp-action="ToggleVariant" method="post" class="d-inline">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@v.Id" />
                                                <button type="submit" 
                                                        class="btn @(v.IsActive ? "btn-outline-warning" : "btn-outline-success")" 
                                                        title="@(v.IsActive ? "Desactivar" : "Activar")"
                                                        onclick="return confirm('¿Confirmar cambio de estado?')">
                                                    <i class="fas @(v.IsActive ? "fa-eye-slash" : "fa-eye")"></i>
                                                </button>
                                            </form>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5 text-muted">
                    <i class="fas fa-inbox fa-3x mb-3"></i>
                    <p>No hay variantes creadas aún.</p>
                    <a class="btn btn-primary" asp-action="CreateVariant" asp-route-productId="@product.Id">
                        <i class="fas fa-plus"></i> Crear primera variante
                    </a>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
<script>
// Sincronizar checkboxes con inputs CSV
function syncCsvFromChecks(checkClass, inputId) {
    const selected = Array.from(document.querySelectorAll(`.${checkClass}:checked`))
        .map(cb => cb.value.trim())
        .filter(v => v.length > 0);
    
    document.getElementById(inputId).value = selected.join(',');
}

// Event listeners para fits
document.querySelectorAll('.fitCheck').forEach(cb => {
    cb.addEventListener('change', () => syncCsvFromChecks('fitCheck', 'allowedFitsCsv'));
});

// Event listeners para colors
document.querySelectorAll('.colorCheck').forEach(cb => {
    cb.addEventListener('change', () => syncCsvFromChecks('colorCheck', 'allowedColorsCsv'));
});

// Event listeners para sizes
document.querySelectorAll('.sizeCheck').forEach(cb => {
    cb.addEventListener('change', () => syncCsvFromChecks('sizeCheck', 'allowedSizesCsv'));
});

// Sincronizar inicialmente si hay valores en los inputs
document.addEventListener('DOMContentLoaded', () => {
    // Marcar checkboxes según CSV inicial
    const updateChecksFromCsv = (inputId, checkClass) => {
        const input = document.getElementById(inputId);
        if (!input || !input.value) return;
        
        const values = input.value.split(',').map(v => v.trim());
        document.querySelectorAll(`.${checkClass}`).forEach(cb => {
            cb.checked = values.includes(cb.value);
        });
    };
    
    updateChecksFromCsv('allowedFitsCsv', 'fitCheck');
    updateChecksFromCsv('allowedColorsCsv', 'colorCheck');
    updateChecksFromCsv('allowedSizesCsv', 'sizeCheck');
});
</script>
}