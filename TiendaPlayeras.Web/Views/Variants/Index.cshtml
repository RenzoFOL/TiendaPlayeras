@model TiendaPlayeras.Web.Models.ViewModels.VariantsAdminViewModel
@using System.Linq

@{
    var product = Model.Product;
    string Csv(string? s) => string.IsNullOrWhiteSpace(s) ? "" : s;
    var allowedFits = Csv(product.AllowedFitsCsv).Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
    var allowedColors = Csv(product.AllowedColorsCsv).Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
    var allowedSizes = Csv(product.AllowedSizesCsv).Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <div>
        <h3 class="mb-1">Variantes de: <strong>@product.Name</strong></h3>
        <div class="text-muted">Producto #@product.Id</div>
        <div class="mt-2">
            @foreach (var pt in (product.ProductTags ?? new List<TiendaPlayeras.Web.Models.ProductTag>())
                .Where(x => x.IsActive && x.Tag != null && x.Tag.IsActive)
                .OrderBy(x => x.Tag!.Name))
            {
                <span class="badge bg-light text-dark me-1"><i class="fas fa-tag"></i> @pt.Tag!.Name</span>
            }
        </div>
    </div>
    <div>
        <a class="btn btn-primary" asp-action="CreateVariant" asp-controller="Products" asp-route-productId="@product.Id">
            <i class="fas fa-plus"></i> Nueva variante
        </a>
    </div>
</div>

<div class="card mb-4">
    <div class="card-header"><strong>Configuración de opciones visibles en la página pública</strong></div>
    <div class="card-body">
        <form asp-action="SaveVariantOptions" asp-controller="Products" method="post" class="row g-3">
            @Html.AntiForgeryToken()
            <input type="hidden" name="productId" value="@product.Id" />

            <div class="col-12 col-md-4">
                <div class="form-check form-switch mb-2">
                    <input class="form-check-input" type="checkbox" id="useFit" name="useFit" @(product.UseFit ? "checked" : "") />
                    <label class="form-check-label" for="useFit"><strong>Usar Fit</strong></label>
                </div>
                <label class="form-label">Fits permitidos (elige o escribe CSV)</label>
                <div class="d-flex flex-wrap gap-2 mb-2">
                    @foreach (var f in Model.PredefinedFits)
                    {
                        var isChecked = allowedFits.Contains(f);
                        <label class="btn btn-outline-secondary btn-sm">
                            <input type="checkbox" class="me-1 fitCheck" value="@f" @(isChecked ? "checked" : "") />
                            @f
                        </label>
                    }
                </div>
                <input type="text" class="form-control" id="allowedFitsCsv" name="allowedFitsCsv" value="@Csv(product.AllowedFitsCsv)" placeholder="Hombre,Mujer,Unisex,Oversize,Boxy" />
                <div class="form-text">Vacío = se infiere de variantes creadas.</div>
            </div>

            <div class="col-12 col-md-4">
                <div class="form-check form-switch mb-2">
                    <input class="form-check-input" type="checkbox" id="useColor" name="useColor" @(product.UseColor ? "checked" : "") />
                    <label class="form-check-label" for="useColor"><strong>Usar Color</strong></label>
                </div>
                <label class="form-label">Colores permitidos (elige o escribe CSV)</label>
                <div class="d-flex flex-wrap gap-2 mb-2">
                    @foreach (var c in Model.PredefinedColors)
                    {
                        var isChecked = allowedColors.Contains(c);
                        <label class="btn btn-outline-secondary btn-sm">
                            <input type="checkbox" class="me-1 colorCheck" value="@c" @(isChecked ? "checked" : "") />
                            @c
                        </label>
                    }
                </div>
                <input type="text" class="form-control" id="allowedColorsCsv" name="allowedColorsCsv" value="@Csv(product.AllowedColorsCsv)" placeholder="Negro,Blanco,Rojo,#000000" />
                <div class="form-text">Puedes usar nombres o HEX (#RRGGBB).</div>
            </div>

            <div class="col-12 col-md-4">
                <div class="form-check form-switch mb-2">
                    <input class="form-check-input" type="checkbox" id="useSize" name="useSize" @(product.UseSize ? "checked" : "") />
                    <label class="form-check-label" for="useSize"><strong>Usar Talla</strong></label>
                </div>
                <label class="form-label">Tallas permitidas (elige o escribe CSV)</label>
                <div class="d-flex flex-wrap gap-2 mb-2">
                    @foreach (var s in Model.PredefinedSizes)
                    {
                        var isChecked = allowedSizes.Contains(s);
                        <label class="btn btn-outline-secondary btn-sm">
                            <input type="checkbox" class="me-1 sizeCheck" value="@s" @(isChecked ? "checked" : "") />
                            @s
                        </label>
                    }
                </div>
                <input type="text" class="form-control" id="allowedSizesCsv" name="allowedSizesCsv" value="@Csv(product.AllowedSizesCsv)" placeholder="XS,S,M,L,XL,XXL,Yasui" />
                <div class="form-text">Vacío = se infiere de variantes creadas.</div>
            </div>

            <div class="col-12">
                <button class="btn btn-success">
                    <i class="fas fa-save"></i> Guardar configuración
                </button>
            </div>
        </form>
    </div>
</div>

<table class="table table-striped">
    <thead>
        <tr><th>Fit</th><th>Color</th><th>Talla</th><th>Precio</th><th>Stock</th><th>Activo</th><th></th></tr>
    </thead>
    <tbody>
    @foreach (var v in Model.Variants)
    {
        <tr>
            <td>@v.Fit</td>
            <td>@v.Color</td>
            <td>@v.Size</td>
            <td>$@v.Price.ToString("0.00")</td>
            <td>@v.Stock</td>
            <td>@(v.IsActive ? "Sí" : "No")</td>
            <td class="text-nowrap">
                <a class="btn btn-sm btn-outline-secondary" asp-action="EditVariant" asp-controller="Products" asp-route-id="@v.Id">Editar</a>
                <form asp-action="ToggleVariant" asp-controller="Products" method="post" class="d-inline">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@v.Id" />
                    <button class="btn btn-sm btn-outline-warning">
                        @(v.IsActive ? "Inhabilitar" : "Habilitar")
                    </button>
                </form>
            </td>
        </tr>
    }
    </tbody>
</table>

@section Scripts {
<script>
function syncCsvFromChecks(groupClass, inputId) {
    const vals = Array.from(document.querySelectorAll('.' + groupClass + ':checked')).map(x => x.value.trim());
    document.getElementById(inputId).value = vals.join(',');
}
document.querySelectorAll('.fitCheck').forEach(cb => cb.addEventListener('change', () => syncCsvFromChecks('fitCheck', 'allowedFitsCsv')));
document.querySelectorAll('.colorCheck').forEach(cb => cb.addEventListener('change', () => syncCsvFromChecks('colorCheck', 'allowedColorsCsv')));
document.querySelectorAll('.sizeCheck').forEach(cb => cb.addEventListener('change', () => syncCsvFromChecks('sizeCheck', 'allowedSizesCsv')));
</script>
}
